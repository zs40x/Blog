<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Playground &#8211; Stefan Mehnert</title>
	<atom:link href="/tag/playground/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>#DevLife</description>
	<lastBuildDate>Thu, 20 Oct 2016 19:00:55 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7</generator>
	<item>
		<title>XCode Playground Part IV: SpriteKit (2D game engine)</title>
		<link>/2016/02/02/xcode-playground-part-iv-spritekit-2d-game-engine/</link>
		<pubDate>Tue, 02 Feb 2016 16:47:36 +0000</pubDate>
		<dc:creator><![CDATA[stefanmehnert]]></dc:creator>
				<category><![CDATA[iOS Development]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[Playground]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[XCode]]></category>

		<guid isPermaLink="false">/?p=95</guid>
		<description><![CDATA[In the last part of the XCode Playground Series I demonstrate how use it with SpriteKit. It&#8217;s very simple to test animations and physics outside of your project. But as mentioned in the last Part, the performance isn&#8217;t very good. Adding too much nodes or complex physics will lower the FPS rate extremly. But let&#8217;s have a look how &#8230; <a href="/2016/02/02/xcode-playground-part-iv-spritekit-2d-game-engine/" class="more-link">Continue reading<span class="screen-reader-text"> "XCode Playground Part IV: SpriteKit (2D game engine)"</span></a>]]></description>
				<content:encoded><![CDATA[<p>In the last part of the XCode Playground Series I demonstrate how use it with SpriteKit. It&#8217;s very simple to test animations and physics outside of your project.</p>
<p>But as mentioned in <a href="/2016/01/26/xcode-playground-part-iii-behind-the-scenes/">the last Part</a>, the performance isn&#8217;t very good. Adding too much nodes or complex physics will lower the FPS rate extremly.</p>
<p>But let&#8217;s have a look how you can use it:</p>
<div style="width: 840px;" class="wp-video"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video class="wp-video-shortcode" id="video-95-1" width="840" height="525" preload="metadata" controls="controls"><source type="video/mp4" src="/wp-content/uploads/2016/02/demo_spritekit_in_playground.mp4?_=1" /><a href="/wp-content/uploads/2016/02/demo_spritekit_in_playground.mp4">/wp-content/uploads/2016/02/demo_spritekit_in_playground.mp4</a></video></div>
<p>You find the source code here: <a href="https://github.com/zs40x/XCodePlayground_BlogSeries/blob/master/Part_IV.playground/Contents.swift" target="_blank">https://github.com/zs40x/XCodePlayground_BlogSeries/blob/master/Part_IV.playground/Contents.swift</a></p>
<p>If you have a Mac, install Xcode and give it a try!</p>

<div class="twitter-share"><a href="https://twitter.com/intent/tweet?url=http%3A%2F%2Fwww.stefan-mehnert.de%2F2016%2F02%2F02%2Fxcode-playground-part-iv-spritekit-2d-game-engine%2F" class="twitter-share-button">Tweet</a></div>
]]></content:encoded>
	<enclosure url="/wp-content/uploads/2016/02/demo_spritekit_in_playground.mp4" length="11852894" type="video/mp4" />
		</item>
		<item>
		<title>Xcode Playground Part III: Behind the Scenes</title>
		<link>/2016/01/26/xcode-playground-part-iii-behind-the-scenes/</link>
		<pubDate>Tue, 26 Jan 2016 19:34:01 +0000</pubDate>
		<dc:creator><![CDATA[stefanmehnert]]></dc:creator>
				<category><![CDATA[iOS Development]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[Playground]]></category>
		<category><![CDATA[Swift]]></category>

		<guid isPermaLink="false">/?p=73</guid>
		<description><![CDATA[The Xcode Playground is an interactive REPL (Read-Eval-Print-Loop). While you&#8217;re editing the code, Xcode executes, interprets and displays the results in the different views (timeline, result and console). You can use the Swift interpreter from the command line: There are also online interpreters like SwiftStub.com. All-in-all the Playground coding experience is extremely interactive and feels like magic. But this &#8230; <a href="/2016/01/26/xcode-playground-part-iii-behind-the-scenes/" class="more-link">Continue reading<span class="screen-reader-text"> "Xcode Playground Part III: Behind the Scenes"</span></a>]]></description>
				<content:encoded><![CDATA[<p>The Xcode Playground is an interactive REPL (Read-Eval-Print-Loop).</p>
<p>While you&#8217;re editing the code, Xcode executes, interprets and displays the results in the different views (timeline, result and console).</p>
<p>You can use the Swift interpreter from the command line:</p>
<div style="width: 840px;" class="wp-video"><video class="wp-video-shortcode" id="video-73-2" width="840" height="525" preload="metadata" controls="controls"><source type="video/mp4" src="/wp-content/uploads/2016/01/REPL.mp4?_=2" /><a href="/wp-content/uploads/2016/01/REPL.mp4">/wp-content/uploads/2016/01/REPL.mp4</a></video></div>
<p>There are also online interpreters like <a href="http://swiftstub.com/" target="_blank">SwiftStub.com</a>.</p>
<p>All-in-all the Playground coding experience is extremely interactive and feels like magic.<br />
But this comes at the cost of performance. Complex or computing-intensive scripts run laggy. Even in the current XCode 7.1 release I regularly encounter errors that require an XCode restart.</p>
<p>But that&#8217;s okay!</p>
<p>For learning &amp; testing this is acceptable and in many cases a better choice then a usual test project. I use it also for SpritKit test&#8217;s wich I demo in the next and last Episode of the XCode Playground series.</p>
<p><strong>Links</strong><br />
<a href="https://developer.apple.com/swift/blog/?id=18" target="_blank">Introduction to the Swift</a><a href="https://developer.apple.com/swift/blog/?id=18" target="_blank">(Apple)<br />
</a><a href="http://swiftstub.com/" target="_blank">SwiftStub.com (online Swift Interpreter)</a></p>

<div class="twitter-share"><a href="https://twitter.com/intent/tweet?url=http%3A%2F%2Fwww.stefan-mehnert.de%2F2016%2F01%2F26%2Fxcode-playground-part-iii-behind-the-scenes%2F" class="twitter-share-button">Tweet</a></div>
]]></content:encoded>
	<enclosure url="/wp-content/uploads/2016/01/REPL.mp4" length="8685231" type="video/mp4" />
		</item>
		<item>
		<title>Xcode Playground Part II: Colors &#038; Comments</title>
		<link>/2016/01/11/xcode-playground-part-ii-colors-comments/</link>
		<pubDate>Mon, 11 Jan 2016 20:15:15 +0000</pubDate>
		<dc:creator><![CDATA[stefanmehnert]]></dc:creator>
				<category><![CDATA[iOS Development]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[Playground]]></category>
		<category><![CDATA[Swift]]></category>

		<guid isPermaLink="false">/?p=56</guid>
		<description><![CDATA[Let&#8217;s have a look at another 2 Playground Features by Example. 1. Pick Colors and track them in the Playground Timeline 2. Create rich Comments with Markup Formatting See also: Apple Developer Library / Markup Formatting Reference]]></description>
				<content:encoded><![CDATA[<p>Let&#8217;s have a look at another 2 Playground Features by Example.</p>
<p><strong>1. Pick Colors and track them in the Playground Timeline<br />
</strong></p>
<div style="width: 840px;" class="wp-video"><video class="wp-video-shortcode" id="video-56-3" width="840" height="525" preload="metadata" controls="controls"><source type="video/mp4" src="/wp-content/uploads/2016/01/Colors.mp4?_=3" /><a href="/wp-content/uploads/2016/01/Colors.mp4">/wp-content/uploads/2016/01/Colors.mp4</a></video></div>
<p><strong>2. Create rich Comments with Markup Formatting</strong></p>
<p><a href="/wp-content/uploads/2016/01/comments_1.png" rel="attachment wp-att-64"><img class="alignnone wp-image-64 size-full" src="/wp-content/uploads/2016/01/comments_1.png" alt="comments_1" width="819" height="233" srcset="/wp-content/uploads/2016/01/comments_1.png 819w, /wp-content/uploads/2016/01/comments_1-300x85.png 300w, /wp-content/uploads/2016/01/comments_1-768x218.png 768w" sizes="(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 984px) 61vw, (max-width: 1362px) 45vw, 600px" /></a></p>
<p><a href="/wp-content/uploads/2016/01/comments_2.png" rel="attachment wp-att-65"><img class="alignnone size-full wp-image-65" src="/wp-content/uploads/2016/01/comments_2.png" alt="comments_2" width="1010" height="410" srcset="/wp-content/uploads/2016/01/comments_2.png 1010w, /wp-content/uploads/2016/01/comments_2-300x122.png 300w, /wp-content/uploads/2016/01/comments_2-768x312.png 768w" sizes="(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px" /></a></p>
<p>See also: <a href="https://developer.apple.com/library/ios/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html#//apple_ref/doc/uid/TP40016497" target="_blank">Apple Developer Library / Markup Formatting Reference</a></p>

<div class="twitter-share"><a href="https://twitter.com/intent/tweet?url=http%3A%2F%2Fwww.stefan-mehnert.de%2F2016%2F01%2F11%2Fxcode-playground-part-ii-colors-comments%2F" class="twitter-share-button">Tweet</a></div>
]]></content:encoded>
	<enclosure url="/wp-content/uploads/2016/01/Colors.mp4" length="6043398" type="video/mp4" />
		</item>
		<item>
		<title>XCode Playground Part I: Diagrams</title>
		<link>/2015/12/03/xcode-playground-part-1-diagrams/</link>
		<pubDate>Thu, 03 Dec 2015 20:35:20 +0000</pubDate>
		<dc:creator><![CDATA[stefanmehnert]]></dc:creator>
				<category><![CDATA[iOS Development]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[Playground]]></category>
		<category><![CDATA[Swift]]></category>

		<guid isPermaLink="false">/?p=35</guid>
		<description><![CDATA[I really like developing with Swift for iOS for fun. With Xcode 6 (and Swift) Apple included the Concept of Playgrounds for learning, testing and so on. Coding in a Playground is interactive, per Default Xcode builds automatically while you change the code. Playground are very simple, but also powerful. Over the next Weeks I&#8217;ll demonstrate other &#8230; <a href="/2015/12/03/xcode-playground-part-1-diagrams/" class="more-link">Continue reading<span class="screen-reader-text"> "XCode Playground Part I: Diagrams"</span></a>]]></description>
				<content:encoded><![CDATA[<p>I really like developing with Swift for iOS for fun. With Xcode 6 (and Swift) Apple included the Concept of Playgrounds for learning, testing and so on. Coding in a Playground is interactive, per Default Xcode builds automatically while you change the code.</p>
<p>Playground are very simple, but also powerful. Over the next Weeks I&#8217;ll demonstrate other cool Playground Features.</p>
<p><a href="/wp-content/uploads/2015/12/diagrams.png"><img class="size-medium wp-image-36 alignright" src="/wp-content/uploads/2015/12/diagrams-300x241.png" alt="Playground with 2 Diagrams" width="300" height="241" srcset="/wp-content/uploads/2015/12/diagrams-300x241.png 300w, /wp-content/uploads/2015/12/diagrams.png 960w" sizes="(max-width: 300px) 85vw, 300px" /></a>Let&#8217;s have a look at the Diagrams:<br />
In my 2 Examples I use loops and Playground tracks the variable Changes. If you use &#8220;print&#8221; the Console Output would be displayed, but to use the Diagram we just need an Variable as single Statement or an Operation as you see in the second Example.</p>
<p>I made a short Video to demonstrate how to open the Diagram. Note that the diagram gets updated instantaneously after changing the code!</p>
<div style="width: 840px;" class="wp-video"><video class="wp-video-shortcode" id="video-35-4" width="840" height="525" preload="metadata" controls="controls"><source type="video/mp4" src="/wp-content/uploads/2015/12/simple_diagram_1.mp4?_=4" /><a href="/wp-content/uploads/2015/12/simple_diagram_1.mp4">/wp-content/uploads/2015/12/simple_diagram_1.mp4</a></video></div>
<p>&nbsp;</p>

<div class="twitter-share"><a href="https://twitter.com/intent/tweet?url=http%3A%2F%2Fwww.stefan-mehnert.de%2F2015%2F12%2F03%2Fxcode-playground-part-1-diagrams%2F" class="twitter-share-button">Tweet</a></div>
]]></content:encoded>
	<enclosure url="/wp-content/uploads/2015/12/simple_diagram_1.mp4" length="1416835" type="video/mp4" />
		</item>
	</channel>
</rss>
